{"version":3,"sources":["components/daysMonthArray.js","components/getDaysMonth.js","components/styledComponents.js","components/calendarDaysofWeek.js","components/calendarHeader.js","components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["monthArray","days","getDaysMonth","year","month","monthIndex","names","Object","freeze","date","Date","result","getMonth","push","getDate","getDay","setDate","H4","styled","h4","Wrapper","div","HeaderDiv","GridContainer","GridItem","props","selected","blank","GridDay","ArrowDiv","left","CalendarDaysOfWeek","map","el","key","toUpperCase","CalendarHeader","currDate","currMonth","currYear","Calendar","d","useState","setMonth","getFullYear","setYear","handleArrowClick","val","dates","calendarTable","count","row","cells","dy","length","day","split","cYear","cMonth","cDay","parseInt","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85d1739f.chunk.js","sourcesContent":["export const monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nexport const days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];","import { days } from './daysMonthArray';\n\nconst getDaysMonth = (year, month) => {\n    const monthIndex = month - 1;\n    const names = Object.freeze(days);\n    const date = new Date(year, monthIndex, 1);\n    const result = [];\n    while (date.getMonth() === monthIndex) {\n        result.push(`${date.getDate()} - ${names[date.getDay()]}`);\n        date.setDate(date.getDate() + 1);\n    };\n    return result;\n}\n\nexport default getDaysMonth;","import styled from 'styled-components'\n\nexport const H4 = styled.h4 `\ntext-align: center;\n`;\n\nexport const Wrapper = styled.div `\nposition: relative;\n`;\n\nexport const HeaderDiv = styled.div`\npadding: 1rem;\nfont-size: 2rem;\ntext-align: center;\n`;\n\nexport const GridContainer = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(7, 14.28%);\nborder-bottom: 1px solid lightgray;\n`;\n\nexport const GridItem = styled.div`\ntext-align: center;\nposition: relative;\nheight: 6em;\nborder-right: 1px solid lightgray;\noverflow: hidden;\ncursor: pointer;\nbackground: ${props => props.selected ? '#00ff00' : props.blank ? '#f0f0f0' : 'white'};\ntransition: 0.25s ease-out;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n`;\n\nexport const GridDay =  styled.div`\ntext-align: center;\npadding: 1rem 0;\n`;\n\nexport const ArrowDiv = styled.div`\nborder: solid black;\nborder-width: 0 3px 3px 0;\ndisplay: inline-block;\npadding: 5px;\nposition: absolute;\ntop: 31px;\ncursor: pointer;\ntransform: ${props => props.left ? 'rotate(135deg)' : 'rotate(-45deg)'};\n-webkit-transform: ${props => props.left ? 'rotate(135deg)' : 'rotate(-45deg)'};\nleft: ${props => props.left ? '20px' : 'auto'};\nright: ${props => props.left ? 'auto' : '20px'};\n`;\n","import React from 'react';\nimport { days } from './daysMonthArray'; \nimport { GridContainer, GridDay } from './styledComponents';\n\nconst CalendarDaysOfWeek = () => {\n\n    return (\n        <GridContainer>\n            {days.map((el) => <GridDay key={el}>{el.toUpperCase()}</GridDay>)}\n        </GridContainer>\n    );\n    \n}\n\nexport default CalendarDaysOfWeek;","import React from 'react';\nimport { monthArray } from './daysMonthArray';\nimport { HeaderDiv } from './styledComponents';\n\nconst CalendarHeader = ({currDate}) => {\n\n    return (\n        <HeaderDiv>\n           {monthArray[currDate.currMonth] + \" \" + currDate.currYear}\n        </HeaderDiv>\n    )\n}\n\nexport default CalendarHeader;","import React, { useState } from 'react';\nimport getDaysMonth from './getDaysMonth';\nimport { days } from './daysMonthArray';\nimport { ArrowDiv, GridContainer, GridItem, Wrapper } from './styledComponents';\nimport CalendarDaysOfWeek from './calendarDaysofWeek';\nimport CalendarHeader from './calendarHeader';\n\nconst Calendar = () => {\n\n    const d = new Date();\n\n    const [currMonth, setMonth] = useState(d.getMonth());\n    const [currYear, setYear] = useState(d.getFullYear());\n\n    const handleArrowClick = (val) => {\n        if (val === 'next') {\n          if (currMonth === 11) {\n            setYear(currYear + 1);\n            setMonth(0);\n          } else {\n            setMonth(currMonth + 1);\n          }\n        } else {\n          if (currMonth === 0) {\n            setYear(currYear - 1);\n            setMonth(11);\n          } else {\n            setMonth(currMonth - 1);\n          }\n        }\n    \n    }\n\n    const dates = getDaysMonth(currYear, currMonth + 1);\n\n    let calendarTable = [];\n    let count = 0;\n\n    for (let row = 0; row < 6; row++) {\n \n        let cells = [];\n \n        for (let dy = 0; dy < days.length; dy++) {\n            \n            if (count >= dates.length) {\n                cells.push(<GridItem blank key={row + dy}></GridItem>);\n            } else {\n                let day = dates[count].split(\" - \");\n                if (days[dy] === day[1]) {\n                    const d = new Date();\n                    const cYear = d.getFullYear();\n                    const cMonth = d.getMonth();\n                    const cDay = d.getDate();\n                    const currday = parseInt(day[0]);\n                    (currday === cDay && cMonth === currMonth && cYear === currYear ? cells.push(<GridItem selected key={row + dy}>{day[0]}</GridItem>) : cells.push(<GridItem key={row + dy}>{day[0]}</GridItem>));    \n                    count++;\n                } else {\n                    cells.push(<GridItem blank key={row + dy}></GridItem>);\n                }\n            }\n            \n        }\n\n        calendarTable.push(<GridContainer key={row}>{cells}</GridContainer>);\n\n    }\n\n    const currDate = {\n        currYear: currYear,\n        currMonth: currMonth\n    }\n\n    return (\n        <Wrapper>\n            <ArrowDiv left onClick={() => handleArrowClick('prev')}></ArrowDiv>\n            <ArrowDiv onClick={() => handleArrowClick('next')}></ArrowDiv>\n            <CalendarHeader currDate={currDate} />\n            <CalendarDaysOfWeek />\n            {calendarTable}\n        </Wrapper>\n    );\n\n}\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './components/calendar';\nimport { H4 } from './components/styledComponents';\n\nconst App = () => {\n\n  return <>\n    <H4>React Hooks Calendar</H4>\n    <Calendar />\n  </> \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}